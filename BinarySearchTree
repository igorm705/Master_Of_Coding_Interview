class BinarySearchTree {
    constructor() {
        this.root = null;
        this.pointer = null;
    }
    //-------------insert method--------------
    insert(inserted_value) {
        if (this.root == null) {
            const newNode = new Node(inserted_value);
            this.root = this.pointer = newNode;
            // console.log("this.root = " + this.root.value);
        }
        else {
            if (inserted_value > this.pointer.value) {
                this.insert_right(inserted_value);
            }
            else if (inserted_value < this.pointer.value) {
                this.insert_left(inserted_value);
            }
            else {
                this.counter++;
            }
        }
    }
    //----------------insert child--------------
    insert_right(inserted_value) {
        if(this.pointer.right == null) {
            const newNode = new Node(inserted_value);
            this.pointer.right = newNode;
            this.pointer = this.root;
        }
        else {
            this.pointer = this.pointer.right;
            this.insert(inserted_value);
        }
    }
    //----------------insert left child-------------
    insert_left(inserted_value) {
        if(this.pointer.left == null) {
            const newNode = new Node(inserted_value);
            this.pointer.left = newNode;
            this.pointer = this.root;
        }
        else {
            this.pointer = this.pointer.left;
            this.insert(inserted_value);
        }
    }
    //---------------lookup method------------
    lookup(value){
        if (this.pointer == null) {
            this.pointer = this.root;
            return false;
        }
        else {
            if (this.pointer.value == value)  {
                this.pointer = this.root;
                return true;
            }
            else if(this.pointer.value > value){
                this.pointer = this.pointer.left;
                return this.lookup(value);
            }
            else if(this.pointer.value < value){
                this.pointer = this.pointer.right;
                return this.lookup(value);
            }
        }
        return this.lookup(value);
    }
    //---------------remove node method------------
    remove(value) {

       // console.log("remove function");

        //exception
        if (this.root == null) {
      //      console.log("remove function, this.root == null");
            return false;
        }

        if (this.root.value == value) {
        //    console.log("remove function, this.root.value == value");
            this.root = this.append_new_child();
        }

        else {
          //  console.log("remove function, else");
            return this.remove_with_recursion(value, true,
                this.root);
        }

    }
    //---------------remove with recursion---------------
    remove_with_recursion (value, right, father_pointer) {

    //    console.log("remove_with_recursion");
        //exception
        // if (this.pointer == null){
        //   console.log("remove_with_recursion,  this.pointer == null");
        // return false;
        // }

        if (this.pointer.value < value){
            //console.log("remove_with recursion, this.pointer.value = " + this.pointer.value + " < " +  value);
            var temp = this.pointer;
            this.pointer = this.pointer.right;
          //  console.log("remove_with recursion, this.pointer.value now = " + this.pointer.value);
            this.remove_with_recursion (value, true, temp);
        }
        else if (this.pointer.value > value) {
            //console.log("remove_with recursion, this.pointer.value > value");
            var temp = this.pointer;
            this.pointer = this.pointer.left;
            this.remove_with_recursion (value, false, temp);
        }

        else if (this.pointer.value == value) {
          //  console.log("remove_with recursion, this.pointer.value == value")
            if (right){
                father_pointer.right = this.append_new_child();
            }
            else {
                father_pointer.left = this.append_new_child();
            }
            return true;
        }
    }
    //--------------append_new_child child------------
    append_new_child (value){

        //console.log("append_new_child");
        //in case there is not such value
        if (this.pointer == null) {
            return null;
        }

        if (this.pointer.left != null && this.pointer.right == null) {
            return this.pointer.left;
        }
        else if (this.pointer.left == null && this.pointer.right != null){
            return this.pointer.right;
        }

        else if (this.pointer.left != null && this.pointer.right != null) {
            var right_pointer = this.pointer.right;
            while (right_pointer.left != null) {
                if (right_pointer.right == null) {
                    right_pointer = right_pointer.right;
                    if (right_pointer.left == null) {
                        right_pointer.left = this.pointer.left;
                        return this.pointer.right;
                    }
                } else if (right_pointer.right == null) {
                    right_pointer = right_pointer.left;
                }

            }
        }
        else  if (this.pointer.left == null && this.pointer.right == null) {
            return null;
        }
    }
}
//----------------------------------------------------
var Node = require('./Node.js');
var newTree = new BinarySearchTree();

newTree.insert(9);
newTree.insert(4);
newTree.insert(6);
newTree.insert(1);
newTree.insert(20);
newTree.insert(15);
newTree.insert(170);


newTree.remove(170);
JSON.stringify(traverse(newTree.root));
newTree.lookup(20);

function traverse(node){
    const tree = {value: node.value};
    tree.left = node.left === null ? null :
        traverse(node.left);
    tree.right = node.right === null ? null :
        traverse(node.right);
    return tree;
}
